// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/login/interface/v1/login.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClockinInterfaceClockinOffWork = "/api.login.interface.v1.ClockinInterface/ClockinOffWork"
const OperationClockinInterfaceClockinOnWork = "/api.login.interface.v1.ClockinInterface/ClockinOnWork"
const OperationClockinInterfaceLogin = "/api.login.interface.v1.ClockinInterface/Login"
const OperationClockinInterfaceRegister = "/api.login.interface.v1.ClockinInterface/Register"

type ClockinInterfaceHTTPServer interface {
	ClockinOffWork(context.Context, *ClockinOffWorkRequest) (*ClockinOffWorkReply, error)
	ClockinOnWork(context.Context, *ClockinOnWorkRequest) (*ClockinOnWorkReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
}

func RegisterClockinInterfaceHTTPServer(s *http.Server, srv ClockinInterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/login/v1/register", _ClockinInterface_Register0_HTTP_Handler(srv))
	r.POST("/api/login/v1/login", _ClockinInterface_Login0_HTTP_Handler(srv))
	r.GET("/api/login/v1/onwork", _ClockinInterface_ClockinOnWork0_HTTP_Handler(srv))
	r.GET("/api/login/v1/offwork", _ClockinInterface_ClockinOffWork0_HTTP_Handler(srv))
}

func _ClockinInterface_Register0_HTTP_Handler(srv ClockinInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClockinInterfaceRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _ClockinInterface_Login0_HTTP_Handler(srv ClockinInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClockinInterfaceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _ClockinInterface_ClockinOnWork0_HTTP_Handler(srv ClockinInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClockinOnWorkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClockinInterfaceClockinOnWork)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClockinOnWork(ctx, req.(*ClockinOnWorkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClockinOnWorkReply)
		return ctx.Result(200, reply)
	}
}

func _ClockinInterface_ClockinOffWork0_HTTP_Handler(srv ClockinInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClockinOffWorkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClockinInterfaceClockinOffWork)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClockinOffWork(ctx, req.(*ClockinOffWorkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClockinOffWorkReply)
		return ctx.Result(200, reply)
	}
}

type ClockinInterfaceHTTPClient interface {
	ClockinOffWork(ctx context.Context, req *ClockinOffWorkRequest, opts ...http.CallOption) (rsp *ClockinOffWorkReply, err error)
	ClockinOnWork(ctx context.Context, req *ClockinOnWorkRequest, opts ...http.CallOption) (rsp *ClockinOnWorkReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
}

type ClockinInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewClockinInterfaceHTTPClient(client *http.Client) ClockinInterfaceHTTPClient {
	return &ClockinInterfaceHTTPClientImpl{client}
}

func (c *ClockinInterfaceHTTPClientImpl) ClockinOffWork(ctx context.Context, in *ClockinOffWorkRequest, opts ...http.CallOption) (*ClockinOffWorkReply, error) {
	var out ClockinOffWorkReply
	pattern := "/api/login/v1/offwork"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClockinInterfaceClockinOffWork))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClockinInterfaceHTTPClientImpl) ClockinOnWork(ctx context.Context, in *ClockinOnWorkRequest, opts ...http.CallOption) (*ClockinOnWorkReply, error) {
	var out ClockinOnWorkReply
	pattern := "/api/login/v1/onwork"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClockinInterfaceClockinOnWork))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClockinInterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/api/login/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClockinInterfaceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClockinInterfaceHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/api/login/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClockinInterfaceRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
