// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/login/interface/v1/login.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClockinInterfaceClient is the client API for ClockinInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClockinInterfaceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	ClockinOnWork(ctx context.Context, in *ClockinOnWorkRequest, opts ...grpc.CallOption) (*ClockinOnWorkReply, error)
	ClockinOffWork(ctx context.Context, in *ClockinOffWorkRequest, opts ...grpc.CallOption) (*ClockinOffWorkReply, error)
}

type clockinInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewClockinInterfaceClient(cc grpc.ClientConnInterface) ClockinInterfaceClient {
	return &clockinInterfaceClient{cc}
}

func (c *clockinInterfaceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/api.login.interface.v1.ClockinInterface/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clockinInterfaceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.login.interface.v1.ClockinInterface/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clockinInterfaceClient) ClockinOnWork(ctx context.Context, in *ClockinOnWorkRequest, opts ...grpc.CallOption) (*ClockinOnWorkReply, error) {
	out := new(ClockinOnWorkReply)
	err := c.cc.Invoke(ctx, "/api.login.interface.v1.ClockinInterface/ClockinOnWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clockinInterfaceClient) ClockinOffWork(ctx context.Context, in *ClockinOffWorkRequest, opts ...grpc.CallOption) (*ClockinOffWorkReply, error) {
	out := new(ClockinOffWorkReply)
	err := c.cc.Invoke(ctx, "/api.login.interface.v1.ClockinInterface/ClockinOffWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClockinInterfaceServer is the server API for ClockinInterface service.
// All implementations must embed UnimplementedClockinInterfaceServer
// for forward compatibility
type ClockinInterfaceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	ClockinOnWork(context.Context, *ClockinOnWorkRequest) (*ClockinOnWorkReply, error)
	ClockinOffWork(context.Context, *ClockinOffWorkRequest) (*ClockinOffWorkReply, error)
	mustEmbedUnimplementedClockinInterfaceServer()
}

// UnimplementedClockinInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedClockinInterfaceServer struct {
}

func (UnimplementedClockinInterfaceServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedClockinInterfaceServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedClockinInterfaceServer) ClockinOnWork(context.Context, *ClockinOnWorkRequest) (*ClockinOnWorkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClockinOnWork not implemented")
}
func (UnimplementedClockinInterfaceServer) ClockinOffWork(context.Context, *ClockinOffWorkRequest) (*ClockinOffWorkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClockinOffWork not implemented")
}
func (UnimplementedClockinInterfaceServer) mustEmbedUnimplementedClockinInterfaceServer() {}

// UnsafeClockinInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClockinInterfaceServer will
// result in compilation errors.
type UnsafeClockinInterfaceServer interface {
	mustEmbedUnimplementedClockinInterfaceServer()
}

func RegisterClockinInterfaceServer(s grpc.ServiceRegistrar, srv ClockinInterfaceServer) {
	s.RegisterService(&ClockinInterface_ServiceDesc, srv)
}

func _ClockinInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockinInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.interface.v1.ClockinInterface/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockinInterfaceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClockinInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockinInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.interface.v1.ClockinInterface/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockinInterfaceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClockinInterface_ClockinOnWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockinOnWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockinInterfaceServer).ClockinOnWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.interface.v1.ClockinInterface/ClockinOnWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockinInterfaceServer).ClockinOnWork(ctx, req.(*ClockinOnWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClockinInterface_ClockinOffWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockinOffWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockinInterfaceServer).ClockinOffWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.login.interface.v1.ClockinInterface/ClockinOffWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockinInterfaceServer).ClockinOffWork(ctx, req.(*ClockinOffWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClockinInterface_ServiceDesc is the grpc.ServiceDesc for ClockinInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClockinInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.login.interface.v1.ClockinInterface",
	HandlerType: (*ClockinInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ClockinInterface_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ClockinInterface_Login_Handler,
		},
		{
			MethodName: "ClockinOnWork",
			Handler:    _ClockinInterface_ClockinOnWork_Handler,
		},
		{
			MethodName: "ClockinOffWork",
			Handler:    _ClockinInterface_ClockinOffWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/login/interface/v1/login.proto",
}
